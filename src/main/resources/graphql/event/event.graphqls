scalar DateTime

type Direction {
    id: ID!
    name: String
}

input DirectionInput {
    name: String
}

type Tag {
    id: ID!
    name: String
}

input TagInput {
    name: String
}

type Event {
    id: ID!
    title: String
    region: String
    address: String
    dateStart: Int
    dateEnd: Int
    taskDescription: [String]
    requirements: [String]
    facilities: [String]
    materials: [String]
    photoUrl: String
    email: String
    currentAmount: Int
    maxAmount: Int
    online: Boolean
    participants: [User]
    owner: User
    directions: [Direction]
    tags: [Tag]
    published: Boolean
}

input EventInput {
    title: String
    region: String
    address: String
    dateStart: Int
    dateEnd: Int
    taskDescription: [String]
    requirements: [String]
    facilities: [String]
    materials: [String]
    photoUrl: String,
    email: String
    currentAmount: Int
    maxAmount: Int
    online: Boolean
    participants: [UserInput]
    directions: [DirectionInput]
    tags: [TagInput]
    published: Boolean
}

extend type Query {
    getEvents: [Event],
    getEvent(id: ID!): Event

    unprGetEvents: [Event],
    unprGetEvent(id: ID!): Event
}

extend type Mutation {
    createEvent(event: EventInput): Event
    updateEvent(id: ID!, event: EventInput): Event
    deleteEvent(id: ID!): String
    deleteEvents: String

    unprCreateEvent(event: EventInput): Event
    unprUpdateEvent(id: ID!, event: EventInput): Event
    unprDeleteEvent(id: ID!): [Event]
    unprDeleteEvents: [Event]
}


